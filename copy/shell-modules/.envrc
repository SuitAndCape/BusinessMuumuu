#!/bin/sh
# $HOME/shell-modules/.envrc

####= SuitAndCape Local Shell Environment Run Commands
##============================================================================##

## Stash local shell environment run commands here

##== Paths ====================================================================#

## PATH="new_PATH:$PATH" is a non-destructive path change used to preserve the
#old path, like (A += B) == (A = A + B)

## Path order matters, putting "/usr/local/bin:" before "$PATH" ensures Brew
#programs will be seen and used before another program of the same name is
#called

## Path for RVM, if it exists
test -d "${HOME}"/.rvm/bin && PATH="$PATH:${HOME}/.rvm/bin"

## Path for Rbenv, if it exists
test -d "${HOME}"/.rbenv/ && PATH="${HOME}/.rbenv/bin:$PATH"

## Path for jEnv, if it exists
test -d "${HOME}"/.jenv/ && export PATH="${HOME}/.jenv/bin:$PATH"

## Path for Homebrew, if it exists
test -d /usr/local/bin && export PATH="/usr/local/bin:/usr/local/sbin:$PATH"

## Custom Path for global NPM packages, if custom directory exists
test -d "${HOME}"/.npm-global/ && export PATH="${HOME}/.npm-global/bin:$PATH"

## Path for Clojure, if it exists
test -d "${HOME}"/.cljr/ && export PATH="${HOME}/.cljr/bin:$PATH"

## Path for Heroku, if it exists
test -d /usr/local/heroku/ && export PATH="/usr/local/heroku/bin:$PATH"

## Path for the current user's binary directory, if it exists
test -d "${HOME}"/bin && export PATH="${HOME}/bin:$PATH"

##== Path Tools ===============================================================#

## Prevent duplicates from entering the Path
## @source http://unix.stackexchange.com/questions/40749/remove-duplicate-path-entries-with-awk-command
for x in /path/to/add â€¦; do
  case ":$PATH:" in
    *":$new_entry:"*) :;; ## Entry already present
    *) PATH="$new_entry:$PATH";;
  esac
done

## Read each entry in Path, copy new entries, and remove duplicates
## @source http://unix.stackexchange.com/questions/40749/remove-duplicate-path-entries-with-awk-command
if [ -n "$PATH" ]; then
  old_PATH=$PATH:; PATH=
  while [ -n "$old_PATH" ]; do
    new_entry=${old_PATH%%:*}    ## First remaining entry
    case $PATH: in
      *:"$new_entry":*) ;;       ## Entry already present
      *) PATH=$PATH:$new_entry;; ## New entry
    esac
    old_PATH=${old_PATH#*:}
  done
  PATH=${PATH#:}
  unset old_PATH new_entry
fi

##== Environment Variables ====================================================#

## Allow 104,793 entries to be stored in memory during a session
HISTSIZE=104793

## Set *Nix system specific variables
if OS_OSX; then
  ## OS X `ls` colorflag
  COLORFLAG="-G"
  ## OS X open command variable
  OPEN_APP="open -a"
  ## OS X chruby file location
  chruby_local=/usr/local/opt/chruby/share/chruby
elif OS_LINUX; then
  ## Linux `ls` colorflag
  COLORFLAG="--color"
  ## Linux open command variable
  OPEN_APP="xdg-open"
  ## Linux chruby file location
  chruby_local=/usr/local/share/chruby
fi

## Set shell specific variables
if SHELL_BASH; then
  ## Enable Bash history and set destination
  HISTFILE="${HOME}"/.bhistory
  ## Allow 104,793 Bash history entries
  HISTFILESIZE="${HISTSIZE}"
elif SHELL_ZSH; then
  ## Enable Zsh history and set destination
  HISTFILE="${HOME}"/.zhistory
  ## Allow 104,793 Zsh history entries
  SAVEHIST="${HISTSIZE}"
  ## Output total CPU usage duration for commands that run beyond 10 seconds
  REPORTTIME=10
fi

##== Homebrew Setup ===========================================================#

## If Homebrew exists...
if USE_BREW; then
  ## Install/symlink Homebrew application casks to the /Applications/ directory
  export HOMEBREW_CASK_OPTS="--appdir=/Applications"

  if SHELL_ZSH; then
    ## If the Homebrew zsh/site-functions/ directory exists...
    zsh_site_func=/usr/local/share/zsh/site-functions
    if [ -d "${zsh_site_func}" ]; then
      ## Add the Homebrew maintained Zsh site-functions to the Zsh fpath
      fpath=(
        /usr/local/share/zsh/site-functions
        $fpath
      )
    fi
  fi
fi

##== Node Setup ===============================================================#

## If Node exists...
if USE_NODE; then
  ## Enable `node` REPL history
  export NODE_REPL_HISTORY="${HOME}"/.node_history

  ## Allow 104,793 `node` REPL history entries
  export NODE_REPL_HISTORY_SIZE=104793

  ## Make `node` REPL use sloppy mode by default
  export NODE_REPL_MODE="sloppy"
fi

##== Java Setup ===============================================================#

## Load jEnv shims and autocomplete, if it exists
USE_JENV && eval "$(jenv init -)"

##== Python Setup =============================================================#

## Pip is accessible even if no virtualenv is activated (use only if necessary)
# export PIP_REQUIRE_VIRTUALENV=false

## Sets Python encoding used for STDIN, STDOUT, and STDERR to UTF-8
export PYTHONIOENCODING="UTF-8"

##== Ruby Setup ===============================================================#

## Load RVM into a shell session as a function, if it exists
USE_RVM && source "${HOME}"/.rvm/scripts/rvm

## Load Rbenv shims and autocomplete, if it exists
USE_RBENV && eval "$(rbenv init -)"

## If chruby exists...
if [ -d "${chruby_local}" ]; then
  ## Manage Ruby via chruby
  source "${chruby_local}"/chruby.sh
  ## Set default Ruby version (2.3.0)
  chruby ruby-2.3.0
  ## Enable auto-switching of Rubies specified by .ruby-version files
  source "${chruby_local}"/auto.sh
fi
