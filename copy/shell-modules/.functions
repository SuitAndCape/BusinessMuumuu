#!/bin/sh
# $HOME/shell-modules/.functions

####= SuitAndCape Shell Functions
##============================================================================##

## Functions for the user to run and to modify various outputs

##== Usable Functions =========================================================#

## `-` â€“ Change to the previous working directory
## (also see: `alias cd-`)
## @source http://unix.stackexchange.com/a/236262/165656
-() {
  if [[ $# -eq 0 ]]; then
    cd "${OLDPWD}" && echo -e "cd ${OLDPWD}/ ${ARROW} $PWD/"
  else
    builtin - "$@"
  fi
}

## `cls PATH/TO/DIRECTORY` â€“ Change the current working directory and list the
#contents in long format
cls() {
  if [ -d "$1" ]; then
    cd "$1"
    ls -laF
  elif [ "$1" = "" ]; then
    cd ~
    ls -laF
  else
    echo -e "${SHELL_ENV_TYPE}: cls: no such directory: ${NO}$1/${PE}"
  fi
}

## `cpcmd` â€“ Copy the last command entered
cpcmd() {
  history | tail -1 | cut -c 8- | pbcopy
}

## `extract PATH/TO/FILE` â€“ Extract common package and compressed file formats
## @based-on https://github.com/xvoland/Extract
## @modifier Ali Esmaili
extract() {
  if [ -z "$1" ]; then
    ## Display usage if no parameters given
    echo "usage: extract <PATH/FILE_NAME>.<7z|Z|bz2|exe|gz|lzma|rar|tar|tar.bz2|tar.gz|tar.xz|taz|tb2|tbz2|tbz|tgz|txz|xz|zip>"
  else
    if [ -f "$1" ]; then
      ## Directory to hold extracted contents
      directory_name=${1%.*}
      ## Extract contents if system knows how
      case "$1" in
        *.7z)      7z x ./"$1"        ;;
        *.Z)       uncompress ./"$1"  ;;
        *.bz2)     bunzip2 ./"$1"     ;;
        *.exe)     cabextract ./"$1"  ;;
        *.gz)      gunzip ./"$1"      ;;
        *.lzma)    unlzma ./"$1"      ;;
        *.rar)     unrar x -ad ./"$1" ;;
        *.tar)     tar xvf ./"$1"     ;;
        *.tar.bz2) tar xvjf ./"$1"    ;;
        *.tar.gz)  tar xvzf ./"$1"    ;;
        *.tar.xz)  tar xvJf ./"$1"    ;;
        *.taz)     tar xvzf ./"$1"    ;;
        *.tb2)     tar xvjf ./"$1"    ;;
        *.tbz2)    tar xvjf ./"$1"    ;;
        *.tbz)     tar xvjf ./"$1"    ;;
        *.tgz)     tar xvzf ./"$1"    ;;
        *.txz)     tar xvJf ./"$1"    ;;
        *.xz)      unxz ./"$1"        ;;
        *.zip)     unzip ./"$1"       ;;
        *)         echo -e "${SHELL_ENV_TYPE}: extract: unknown archive method: ${NO}$1${PE}" ;;
      esac
    else
      echo -e "${SHELL_ENV_TYPE}: extract: no such file: ${NO}$1${PE}"
    fi
  fi
}

# who is using the laptop's iSight camera?
cub() {
    echo "Checking to see who is using the iSight cameraâ€¦ ðŸ“·"
    usedby=$(lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{printf $2"\n"}' | xargs ps)
    echo -e "Recent camera uses:\n$usedby"
}

## `launch INTEGER` â€“ Launch a local HTTP server from a directory, optionally at
#a specific port number
launch() {
  port="${1:-8080}"
  open "http://localhost:${port}/"
  echo "Opening http://localhost:${port}/ in the default web browser"
  python -c $'import SimpleHTTPServer; \nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map; \nmap[""] = "text/plain"; \nfor key, value in map.items():\n\tmap[key] = value + "; charset=UTF-8"; \nSimpleHTTPServer.test();' "${port}"
}

## `mkcd PATH/TO/DIRECTORY` â€“ Create a directory then change to it
mkcd() {
  if [ -z "$1" ]; then
    ## Display usage if no parameters given
    echo "usage: mkcd <PATH/TO/DIRECTORY>"
  else
    if ! [ -d "$1" ]; then
      mkdir -pv "$@" && cd "$_"
    elif [ -d "$1" ]; then
      echo -e "${SHELL_ENV_TYPE}: mkcd: directory already exists: ${NO}$1/${PE}"
    else
      echo -e "${SHELL_ENV_TYPE}: mkcd: unable to create directory: ${NO}$1/${PE}"
    fi
  fi
}

## `ql` â€“ Opens Quick Look generated previews for the specified files
ql() {
  if [ -f "$1" ]; then
    qlmanage -p "$1" >& /dev/null
  else
    echo -e "${SHELL_ENV_TYPE}: ql: no such file: ${NO}$1${PE}"
  fi
}

## `shb` â€“ Switch to the Bash shell
shb() {
  ## Use the Homebrew maintained Bash shell, if it exists
  if [[ -e "/usr/local/bin/bash" ]]; then
    chsh -s /usr/local/bin/bash "${USER}"
  ## Use the system's Bash shell, if the Homebrew version doesn't exist
  else
    chsh -s /bin/bash "${USER}"
  fi
}

## `shz` â€“ Switch to the Zsh shell
shz() {
  ## Use the Homebrew maintained Zsh shell, if it exists
  if [[ -e "/usr/local/bin/zsh" ]]; then
    chsh -s /usr/local/bin/zsh "${USER}"
  ## Use the system's Zsh shell, if the Homebrew version doesn't exist
  else
    chsh -s /bin/zsh "${USER}"
  fi
}

## `tre` or `tre INTEGER` â€“ Tree-like list of directory contents three,
#optionally nth, levels deep
tre() {
  ## Directory contents limit
  contents_limit=20
  ## Directory contents to ignore
  contents_neglect=".DS_Store|.git|.sass-cache|Icon*|bower_components|jspm_packages|node_modules"
  ## Directory depth limit, unless an integer argument is passed
  default_depth="${1:-3}"
  tree -CFIa "${contents_neglect}" --dirsfirst --filelimit "${contents_limit}" -L "${default_depth}" $2
}

## `up` or `up INTEGER` â€“ Change the current working directory by one,
#optionally nth, level(s) up
## (also see aliases: `..`, `...`, `....`, `.....`, and `......`)
up() {
  destination=""
  count=$1
  for ((i=1; i <= count; i++)); do
    destination=$destination/..
  done
  destination=$(echo $destination | sed 's/^\///')
  if [ -z "$destination" ]; then
    destination=..
  fi
  cd $destination && echo -e "cd $destination/ $ARROW $PWD"
}

##== Modifier Functions =======================================================#

## Force `command not found` to pretty print
if SHELL_BASH; then
  ## Bash handler
  command_not_found_handle() {
    echo -e "${SHELL_ENV_TYPE}: command not found: ${NO}$1${PE}"
  }
elif SHELL_ZSH; then
  ## Zsh handler
  command_not_found_handler() {
    echo -e "${SHELL_ENV_TYPE}: command not found: ${NO}$1${PE}"
  }
fi
