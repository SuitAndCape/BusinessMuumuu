#!/bin/sh
# $HOME/shell-themes/aesmoji

####= SuitAndCape Shell Visual Aesthetics (w/ Git Emoji)
##============================================================================##

## OS X `ls` custom colors
if OS_OSX; then
  export LSCOLORS=ExBxFxDxCxgadachhcehhe
fi

## OS X `zstyle list-colors` and Linux `ls` custom colors
export LS_COLORS="di=1;34:ln=1;31:so=1;35:pi=1;33:ex=1;32:bd=36;40:cd=33;40:\
su=32;47:sg=37;42:tw=34;47:ow=37;44:"

##== Git Prompt Stylization ===================================================#

## Git branch status prompt
function git_prompt() {
  local git_ahead="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  local git_behind="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  local git_color=$GREEN
  local git_directory="$(git rev-parse --git-dir 2> /dev/null)"
  local git_merge_conflict=$git_directory/MERGE_HEAD
  local git_state=""
  local git_untracked="$(git ls-files --other --exclude-standard 2> /dev/null)"

  ## Check to see if this is a git directory
  if ! git rev-parse --git-dir > /dev/null 2>&1; then
    return 0
  fi

  ## Grab working branch name
  git_branch=$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')

  ## Check if ahead in commits
  if [ "$git_ahead" -gt 0 ]; then
    git_color=$INTENSE_MAGENTA
    git_state="🚀"
  fi

  ## Check if behind in commits
  if [ "$git_behind" -gt 0 ]; then
    git_color=$INTENSE_CYAN
    git_state="🐌"
  fi

  ## Check if merge conflicts exist
  if [ -n $git_directory ] && test -r $git_merge_conflict; then
    git_color=$MAGENTA
    git_state="💥"
  fi

  ## Check if untracked
  if [[ -n $git_untracked ]]; then
    git_color=$CYAN
    git_state="🐾"
  fi

  ## Check if modified
  if ! git diff --quiet 2> /dev/null; then
    git_color=$INTENSE_RED
    git_state="⚡"
  fi

  ## Check if staged
  if ! git diff --cached --quiet 2> /dev/null; then
    git_color=$INTENSE_YELLOW
    git_state="🔧"
  fi

  ## Check for unpushed commits
  if ! git diff $git_branch origin/$git_branch --quiet 2>/dev/null >&2; then
    if [ dirty=0 ]; then
      git_color=$YELLOW
      git_state="📩"
    fi
  fi

  ## Display the git prompt
  echo " [$git_color$git_branch${COLOR_RESET}]$git_state"
}

##== Shell Prompt Stylization =================================================#

## Prompt hostname helper
if IS_SSH; then
  ## Display full hostname in prompt for remote login
  host_style=$(hostname)
else
  ## Display partial hostname in prompt for local login
  host_style=$(hostname -s)
fi

## Bash environment prompt
if SHELL_BASH; then
  ## PS1 is the variable for the prompt you see everytime you hit enter
  if [ $OSTYPE == "darwin15" ] && ! TERM_ITERM; then
    ## Prompt style for El Capitan non-iTerm2 users
    PROMPT_COMMAND=$PROMPT_COMMAND'; PS1="${RED}\W${COLOR_RESET} ${INTENSE_WHITE}@${INTENSE_BLACK}${host_style}${COLOR_RESET}$(git_prompt) :> "'
  else
    ## Prompt style for all other situations
    PROMPT_COMMAND=$PROMPT_COMMAND' PS1="${RED}\W${COLOR_RESET} ${INTENSE_WHITE}@${INTENSE_BLACK}${host_style}${COLOR_RESET}$(git_prompt) :> "'
  fi

## Zsh environment prompt
elif SHELL_ZSH; then
  ## Standard prompt style
  PROMPT='${RED}%1~${COLOR_RESET}$(git_prompt) :> '

  ## Right prompt style
  RPROMPT='${INTENSE_BLUE}%n${COLOR_RESET} ${INTENSE_WHITE}@${INTENSE_BLACK}${host_style}${COLOR_RESET}'
fi

##== Output Hook Definitions ==================================================#

## Zsh autocompletion responses
if SHELL_ZSH; then
  ## Autocompletion `corrections` response formatting
  zstyle ':completion:*:corrections' format "${B_U_INTENSE_MAGENTA}Errors [${COLOR_RESET}${B_U_INTENSE_WHITE}%e${COLOR_RESET}${B_U_INTENSE_MAGENTA}]:${COLOR_RESET} ${INTENSE_WHITE}%d${COLOR_RESET}"

  ## Autocompletion `descriptions` response formatting
  zstyle ':completion:*:descriptions' format "${B_U_INTENSE_BLUE}Completion Type:${COLOR_RESET} ${INTENSE_WHITE}%d${COLOR_RESET}"

  ## Autocompletion `messages` response formatting
  zstyle ':completion:*:messages' format "${B_YELLOW}––––${COLOR_RESET} ${INTENSE_WHITE}%d${COLOR_RESET}"

  ## Autocompletion `warnings` response formatting
  zstyle ':completion:*:warnings' format "${B_U_INTENSE_RED}No Matches Found:${COLOR_RESET} ${INTENSE_WHITE}%d${COLOR_RESET}"
fi

##== Print Hook Definitions ===================================================#

if SHELL_BASH; then
  ## Shell type identifier states that "bash" is the current environment
  SHELL_ENV_TYPE="${PRINT_INTENSE_RED}bash${PRINT_COLOR_RESET}"
elif SHELL_ZSH; then
  ## Shell type identifier states that "zsh" is the current environment
  SHELL_ENV_TYPE="${PRINT_INTENSE_RED}zsh${PRINT_COLOR_RESET}"
fi

## Transition pointer (from 'this' to 'that')
ARROW="${PRINT_INTENSE_BLUE}=>${PRINT_COLOR_RESET}"

## `NOPE` is a pretty print wrapper for inputs that confuse the Terminal
NO="${PRINT_CYAN}"
PE="${PRINT_COLOR_RESET}"

## Terminal welcome message (hook can be found in ~/.bashrc and ~/.zshrc)
LOGIN_WELCOME="Loading ${PRINT_RED}SuitAndCape${PRINT_COLOR_RESET} \
${SHELL_ENV_TYPE} on ${PRINT_INTENSE_BLACK}$(hostname)${PRINT_COLOR_RESET} – Welcome \
${PRINT_INTENSE_BLUE}$USER${PRINT_COLOR_RESET}\n"
