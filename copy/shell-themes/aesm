#!/bin/sh
# $HOME/shell-themes/aesm

####= SuitAndCape Shell Visual Aesthetics
##============================================================================##

## Preferred terminal bold text settings
  ## ✔ Draw bold text in bold font
  ## ⁃ Draw bold text in bright colors

## Mac `ls` custom colors
if OS_MAC; then
  export LSCOLORS=ExBxFxDxCxgadachhcehhe
fi

## Linux `ls` and Mac `zstyle list-colors` custom colors
export LS_COLORS="di=1;34:ln=1;31:so=1;35:pi=1;33:ex=1;32:bd=36;40:cd=33;40:\
su=32;47:sg=37;42:tw=34;47:ow=37;44:"

## Begin less blinking, double-bright, standout, and underline modes
export LESS_TERMCAP_mb=$'\e[1;91m'    ## Bold intense red
export LESS_TERMCAP_md=$'\e[0;91m'    ## Intense red
export LESS_TERMCAP_so=$'\e[0;93;44m' ## Intense yellow, blue background
export LESS_TERMCAP_us=$'\e[4;92m'    ## Underlined intense green

## End less appearance (all), standout, and underline modes
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_ue=$'\e[0m'

##== Shell Output Colors ======================================================#

## Bash output color assignments
if SHELL_BASH; then
  ## Output color assignments (Bash)
  export COLOR_RESET="\[\e[0m\]"
  export RED="\[\e[0;31m\]"
  export GREEN="\[\e[0;32m\]"
  export YELLOW="\[\e[0;33m\]"
  export MAGENTA="\[\e[0;35m\]"
  export CYAN="\[\e[0;36m\]"
  export INTENSE_BLACK="\[\e[0;90m\]"
  export INTENSE_RED="\[\e[0;91m\]"
  export INTENSE_YELLOW="\[\e[0;93m\]"
  export INTENSE_BLUE="\[\e[0;94m\]"
  export INTENSE_MAGENTA="\[\e[0;95m\]"
  export INTENSE_CYAN="\[\e[0;96m\]"
  export INTENSE_WHITE="\[\e[0;97m\]"
  export B_U_INTENSE_RED="\[\e[1;4;91m\]"
  export B_U_INTENSE_YELLOW="\[\e[1;4;93m\]"
  export B_U_INTENSE_BLUE="\[\e[1;4;94m\]"
  export B_U_INTENSE_MAGENTA="\[\e[1;4;95m\]"
  export B_U_INTENSE_WHITE="\[\e[1;4;97m\]"

## Zsh output color assignments
elif SHELL_ZSH; then
  export COLOR_RESET=$(echo "%{\e[0m%}")
  export RED=$(echo "%{\e[0;31m%}")
  export GREEN=$(echo "%{\e[0;32m%}")
  export YELLOW=$(echo "%{\e[0;33m%}")
  export MAGENTA=$(echo "%{\e[0;35m%}")
  export CYAN=$(echo "%{\e[0;36m%}")
  export INTENSE_BLACK=$(echo "%{\e[0;90m%}")
  export INTENSE_RED=$(echo "%{\e[0;91m%}")
  export INTENSE_YELLOW=$(echo "%{\e[0;93m%}")
  export INTENSE_BLUE=$(echo "%{\e[0;94m%}")
  export INTENSE_MAGENTA=$(echo "%{\e[0;95m%}")
  export INTENSE_CYAN=$(echo "%{\e[0;96m%}")
  export INTENSE_WHITE=$(echo "%{\e[0;97m%}")
  export B_U_INTENSE_RED=$(echo "%{\e[1;4;91m%}")
  export B_U_INTENSE_YELLOW=$(echo "%{\e[1;4;93m%}")
  export B_U_INTENSE_BLUE=$(echo "%{\e[1;4;94m%}")
  export B_U_INTENSE_MAGENTA=$(echo "%{\e[1;4;95m%}")
  export B_U_INTENSE_WHITE=$(echo "%{\e[1;4;97m%}")
fi

##== Zsh Output Stylization ===================================================#

## Zsh autocompletion responses
if SHELL_ZSH; then
  ## Fallback to use built in `ls` colors for autocompletion
  zstyle ':completion:*:default' list-colors ''

  ## Use `LS_COLORS` for autocompletion colors
  zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

  ## Autocompletion `kill` response color (red)
  zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=1;31'

  ## Autocompletion `corrections` response formatting
  zstyle ':completion:*:corrections' format "${B_U_INTENSE_MAGENTA}Errors [${COLOR_RESET}${B_U_INTENSE_WHITE}%e${COLOR_RESET}${B_U_INTENSE_MAGENTA}]:${COLOR_RESET} ${INTENSE_WHITE}%d${COLOR_RESET}"

  ## Autocompletion `descriptions` response formatting
  zstyle ':completion:*:descriptions' format "${B_U_INTENSE_BLUE}Completion Type:${COLOR_RESET} ${INTENSE_WHITE}%d${COLOR_RESET}"

  ## Autocompletion `messages` response formatting
  zstyle ':completion:*:messages' format "${B_U_INTENSE_YELLOW}Note:${COLOR_RESET} ${INTENSE_WHITE}%d${COLOR_RESET}"

  ## Autocompletion `warnings` response formatting
  zstyle ':completion:*:warnings' format "${B_U_INTENSE_RED}No Matches Found:${COLOR_RESET} ${INTENSE_WHITE}%d${COLOR_RESET}"
fi

##== Git Prompt Stylization ===================================================#

## Git branch status prompt
function git_prompt() {
  local git_ahead="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  local git_behind="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  local git_color=$GREEN
  local git_directory="$(git rev-parse --git-dir 2> /dev/null)"
  local git_merge_conflict=$git_directory/MERGE_HEAD
  local git_untracked="$(git ls-files --other --exclude-standard 2> /dev/null)"

  ## Check to see if this is a git directory
  if ! git rev-parse --git-dir > /dev/null 2>&1; then
    return 0
  fi

  ## Grab working branch name
  git_branch=$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')

  ## Check if ahead in commits
  if [ "$git_ahead" -gt 0 ]; then
    git_color=$INTENSE_MAGENTA
  fi

  ## Check if behind in commits
  if [ "$git_behind" -gt 0 ]; then
    git_color=$INTENSE_CYAN
  fi

  ## Check if merge conflicts exist
  if [ -n $git_directory ] && test -r $git_merge_conflict; then
    git_color=$MAGENTA
  fi

  ## Check if untracked
  if [[ -n $git_untracked ]]; then
    git_color=$CYAN
  fi

  ## Check if modified
  if ! git diff --quiet 2> /dev/null; then
    git_color=$INTENSE_RED
  fi

  ## Check if staged
  if ! git diff --cached --quiet 2> /dev/null; then
    git_color=$INTENSE_YELLOW
  fi

  ## Check for unpushed commits
  if ! git diff $git_branch origin/$git_branch --quiet 2>/dev/null >&2; then
    if [ dirty=0 ]; then
      git_color=$YELLOW
    fi
  fi

  ## Display the git prompt
  echo " [$git_color$git_branch${COLOR_RESET}]"
}

##== Shell Prompt Stylization =================================================#

## Prompt hostname helper
if IS_SSH; then
  ## Display full hostname in prompt for remote login
  host_style=$(hostname)
else
  ## Display partial hostname in prompt for local login
  host_style=$(hostname -s)
fi

## Bash environment prompt
if SHELL_BASH; then
  ## PS1 is the variable for the prompt you see everytime you hit enter
  if [ $OSTYPE == "darwin15" ] && ! TERM_ITERM; then
    ## Prompt style for El Capitan non-iTerm2 users
    PROMPT_COMMAND=$PROMPT_COMMAND'; PS1="${RED}\W${COLOR_RESET} ${INTENSE_WHITE}@${INTENSE_BLACK}${host_style}${COLOR_RESET}$(git_prompt) :> "'
  else
    ## Prompt style for all other situations
    PROMPT_COMMAND=$PROMPT_COMMAND' PS1="${RED}\W${COLOR_RESET} ${INTENSE_WHITE}@${INTENSE_BLACK}${host_style}${COLOR_RESET}$(git_prompt) :> "'
  fi

## Zsh environment prompt
elif SHELL_ZSH; then
  ## Standard prompt style
  PROMPT='${RED}%1~${COLOR_RESET}$(git_prompt) :> '

  ## Right prompt style
  RPROMPT='${INTENSE_BLUE}%n${COLOR_RESET} ${INTENSE_WHITE}@${INTENSE_BLACK}${host_style}${COLOR_RESET}'
fi

##== Shell Print Colors =======================================================#

## Print color assignments
export PRINT_COLOR_RESET="\e[0m"
export PRINT_RED="\e[0;31m"
export PRINT_INTENSE_BLACK="\e[0;90m"
export PRINT_INTENSE_RED="\e[0;91m"
export PRINT_INTENSE_BLUE="\e[0;94m"

##== Shell Print Stylization ==================================================#

## Display terminal welcome message
echo -e "Loading ${PRINT_RED}SuitAndCape${PRINT_COLOR_RESET} \
${PRINT_INTENSE_RED}${SHELL_ENV_TYPE}${PRINT_COLOR_RESET} on \
${PRINT_INTENSE_BLACK}$(hostname)${PRINT_COLOR_RESET} – Welcome \
${PRINT_INTENSE_BLUE}$USER${PRINT_COLOR_RESET}\n"
